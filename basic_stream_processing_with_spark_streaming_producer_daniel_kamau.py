# -*- coding: utf-8 -*-
"""Basic Stream Processing with Spark Streaming_Producer - Daniel Kamau

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Vk6AceLdT0tP7SgsCTaHf7NmwEbW81g

**Basic Stream Processing with Spark Streaming_Producer - Daniel Kamau**

Real-Time Network Traffic Analysis for Telecommunications

**Problem Statement**


A telecommunications company wants to monitor its network traffic in real-time to identify any
anomalies or patterns that could indicate issues or opportunities for improvement. The company
has a large volume of network traffic data generated every second and needs to process this
data in real-time. They also want to be able to visualize the data to provide insights to the
network operation team.
We will develop a real-time network traffic analysis system using Apache Kafka and Structured
Spark Streaming. The system will ingest and process network traffic data in real-time and
identify any anomalies or patterns. The data will be visualized using a web-based dashboard
that provides real-time insights into the network traffic.


**Hints**

● Set up a Kafka cluster on Confluent Cloud and configure Kafka topics for ingesting network traffic data.

● Use Structured Spark Streaming to ingest data from Kafka topics and perform real-time analytics on the data.

● Implement stateless transformations such as select, filter, and groupBy to analyze the data in real-time.

● Use sliding window operations and window-based aggregations to identify any patterns or anomalies in the data.

● Visualize the data using a web-based dashboard such as Streamlit or Grafana.

**Guidelines**

● Set up a Kafka cluster on Confluent Cloud and create two Kafka topics named
network-traffic and processed-data.

● Implement a Python script using the kafka-python package to generate network traffic data and publish it to the network-traffic Kafka topic.

● Use Structured Spark Streaming to ingest data from the network-traffic Kafka topic and perform real-time analytics on the data.

● Implement a sliding window operation to identify patterns in the data, such as sudden spikes or drops in traffic.

● Use a window-based aggregation to identify any anomalies in the data, such as
unexpected patterns or traffic from unusual sources.

● Publish the processed data to the processed-data Kafka topic.

● Use Grafana to visualize the processed data in real-time. Create graphs that show traffic trends, identify any issues, and provide insights to the network operation team.
"""

!pip install Kafka-Python

!pip install streamlit

!pip install confluent-kafka

!pip install pandas

import pandas as pd
from kafka import KafkaConsumer,KafkaProducer
import time
import random
from confluent_kafka import Producer, Consumer, KafkaError
import streamlit as st
import json

# Kafka producer configuration
bootstrap_servers = 'pkc-lzvrd.us-west4.gcp.confluent.cloud:9092'
sasl_username = 'T2RAQ7I6IKMPA3VR'
sasl_password = 'KETZqHY8AbJzDODAtyjAvzSya7PUNkMjOjdYRkQQdHMD6tjjCyCT4HmI2xwVjKfm'
topic_name = 'network-traffic'

producer = KafkaProducer(
    bootstrap_servers=bootstrap_servers,
    security_protocol='SASL_SSL',
    sasl_mechanism='PLAIN',
    sasl_plain_username=sasl_username,
    sasl_plain_password=sasl_password
)

# Generate and publish network traffic data to Kafka topic
while True:
    # Generate random network traffic data
    source_ip = '.'.join(str(random.randint(0, 255)) for _ in range(4))
    destination_ip = '.'.join(str(random.randint(0, 255)) for _ in range(4))
    bytes_sent = random.randint(1000, 100000)

    # Publish network traffic data to Kafka topic
    producer.send(topic_name, f"{source_ip},{destination_ip},{bytes_sent}".encode('utf-8'))

    # Wait for 1 second before generating next network traffic data
    time.sleep(1)